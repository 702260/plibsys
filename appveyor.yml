environment:
        COVERITY_SCAN_PROJECT_NAME:       "saprykin/plibsys"
        COVERITY_SCAN_NOTIFICATION_EMAIL: "xelfium@gmail.com"
        COVERITY_SCAN_TOKEN:
                secure: 6WFXzLxAMuUovtYc+u8OoruE/V6zhK2M4mZlrszRBIA=

        matrix:
                - CMAKE_GENERATOR: "MinGW Makefiles"
                  USE_MINGW:       "1"
                - CMAKE_GENERATOR: "MinGW Makefiles"
                  USE_MINGW:       "1"
                  USE_MINGW64:     "1"
                - CMAKE_GENERATOR: "Unix Makefiles"
                  USE_CYGWIN:      "1"
                  USE_CYGWIN64:    "1"
                - CMAKE_GENERATOR: "Unix Makefiles"
                  USE_CYGWIN:      "1"
                - CMAKE_GENERATOR: "Visual Studio 9 2008"
                  USE_OLD_MSBUILD: "1"
                - CMAKE_GENERATOR: "Visual Studio 10 2010"
                - CMAKE_GENERATOR: "Visual Studio 10 2010 Win64"
                - CMAKE_GENERATOR: "Visual Studio 11 2012"
                - CMAKE_GENERATOR: "Visual Studio 11 2012 Win64"
                - CMAKE_GENERATOR: "Visual Studio 12 2013"
                - CMAKE_GENERATOR: "Visual Studio 12 2013 Win64"
                - CMAKE_GENERATOR: "Visual Studio 14 2015"
                - CMAKE_GENERATOR: "Visual Studio 14 2015 Win64"
                  USE_COVERITY:    "1"
                - CMAKE_GENERATOR: "NMake Makefiles"
                  USE_LLVM:        "1"

os: Visual Studio 2015

configuration: Release

version: 0.0.1.{build}

branches:
        only:
                - master
                - appveyor_test

clone_folder: c:\projects\plibsys

install:
        # Workaround for https://github.com/appveyor/ci/issues/996
        - If "%USE_MINGW%" == "1" (
          If NOT "%USE_MINGW64%" == "1" (
                C:\MinGW\bin\mingw-get update
                C:\MinGW\bin\mingw-get upgrade libstdc++=4.9.3-1
          ))

        - If "%USE_CYGWIN%" == "1" (
          If "%USE_CYGWIN64%" == "1" (
                c:\cygwin64\setup-x86_64.exe -gqnNdO -R c:\cygwin64 -s http://cygwin.mirror.constant.com -l "c:\cygwin64\var\cache\setup" -P cmake -P cygrunsrv
          ))

        - If "%USE_CYGWIN%" == "1" (
          If NOT "%USE_CYGWIN64%" == "1" (
                c:\cygwin\setup-x86.exe -gqnNdO -R c:\cygwin -s http://cygwin.mirror.constant.com -l "c:\cygwin\var\cache\setup" -P cmake -P cygrunsrv
          ))

build_script:
        - ps: >-
                $BUILD_DIR = "c:\projects\plibsys-build";

                New-Item -ItemType directory -Path $BUILD_DIR | Out-Null;
                Set-Location $BUILD_DIR | Out-Null;

                If ($env:APPVEYOR_REPO_BRANCH -eq "appveyor_test") {
                        $VAR_BOOST_TESTS = "-DPLIBSYS_TESTS_STATIC=ON";

                        If ($env:USE_CYGWIN -eq "1") {
                                $VAR_BOOST_ROOT = "-DBOOST_ROOT=/cygdrive/c/Libraries/boost_1_59_0";
                        } Else {
                                $VAR_BOOST_ROOT = "-DBOOST_ROOT=C:\Libraries\boost_1_59_0";
                        }
                }

                If ($env:USE_MINGW -eq "1") {
                        if ($env:USE_MINGW64 -eq "1") {
                                $env:PATH = "C:\mingw-w64\i686-5.3.0-posix-dwarf-rt_v4-rev0\mingw32\bin;C:\Program Files (x86)\CMake\bin";
                        } Else {
                                $env:PATH = "C:\MinGW\bin;C:\Program Files (x86)\CMake\bin";
                        }

                        $BUILD_TYPE    = "-DCMAKE_BUILD_TYPE=$env:configuration";
                        $BUILD_COMMAND = "mingw32-make";
                } ElseIf ($env:USE_CYGWIN -eq "1") {
                        If ($env:USE_CYGWIN64 -eq "1") {
                                $env:PATH = "c:\cygwin64\bin";
                        } Else {
                                $env:PATH = "c:\cygwin\bin";
                        }

                        $CMAKE_COMMAND = 'cmake -G""{0}"" -DCMAKE_BUILD_TYPE={1} {2} {3} /cygdrive/c/projects/plibsys' -f $env:CMAKE_GENERATOR,$env:configuration,$VAR_BOOST_TESTS,$VAR_BOOST_ROOT

                        & bash -c $CMAKE_COMMAND;
                        & bash -c 'make -j 2';

                        If ($env:APPVEYOR_REPO_BRANCH -eq "appveyor_test") {
                                & bash -c 'cygserver-config --yes';
                                & bash -c 'cygrunsrv -S cygserver';
                                & bash -c 'ctest --output-on-failure -V -C Release';
                        }

                        return;
                } ElseIf ($env:USE_LLVM -eq "1") {
                        pushd "$env:VS140COMNTOOLS\..\..\VC\bin\amd64"
                        cmd /c "vcvars64.bat&set" |
                        foreach {
                                if ($_ -match "=") {
                                        $v = $_.split("="); set-item -force -path "ENV:\$($v[0])"  -value "$($v[1])"
                                }
                        }
                        popd

                        $env:PATH           = "C:\Program Files\LLVM\bin;$env:PATH";
                        $BUILD_COMMAND      = "nmake";
                        $BUILD_PARAMS       = "/NOLOGO"
                        $BUILD_TYPE         = "-DCMAKE_BUILD_TYPE=$env:configuration";
                        $CMAKE_C_COMPILER   = "-DCMAKE_C_COMPILER=clang-cl.exe"
                        $CMAKE_CXX_COMPILER = "-DCMAKE_CXX_COMPILER=cl.exe"
                } Else {
                        If ($env:USE_OLD_MSBUILD -eq "1") {
                                $env:PATH = "C:\Windows\Microsoft.NET\Framework\v3.5;$env:PATH";
                        }

                        $BUILD_COMMAND = "msbuild";
                        $BUILD_PARAMS  = @("/verbosity:normal", "$BUILD_DIR\plibsys.sln", "/p:Configuration=$env:configuration", "/m");
                }

                If ($env:USE_COVERITY -eq "1" -And $env:APPVEYOR_REPO_BRANCH -eq "appveyor_test") {
                        & nuget install PublishCoverity -o $BUILD_DIR;

                        $COVERITY_EXE = "$BUILD_DIR\PublishCoverity.0.11.0\tools\PublishCoverity.exe";

                        # Do not build tests for Coverity
                        & cmake -G"$env:CMAKE_GENERATOR" c:\projects\plibsys;

                        & cov-build --dir "$BUILD_DIR\cov-int" $BUILD_COMMAND $BUILD_PARAMS;

                        & $COVERITY_EXE compress -o "$BUILD_DIR\coverity.zip" -i "$BUILD_DIR\cov-int";
                        & $COVERITY_EXE publish -z "$BUILD_DIR\coverity.zip" -r $env:COVERITY_SCAN_PROJECT_NAME -t $env:COVERITY_SCAN_TOKEN -e $env:COVERITY_SCAN_NOTIFICATION_EMAIL --codeVersion $env:APPVEYOR_BUILD_VERSION;
                }

                & cmake -G"$env:CMAKE_GENERATOR" $BUILD_TYPE $VAR_BOOST_TESTS $VAR_BOOST_ROOT $CMAKE_C_COMPILER $CMAKE_CXX_COMPILER c:\projects\plibsys;
                & $BUILD_COMMAND $BUILD_PARAMS;

                If ($env:APPVEYOR_REPO_BRANCH -eq "appveyor_test") {
                        & ctest --output-on-failure -V -C Release;
                }
